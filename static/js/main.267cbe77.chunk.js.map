{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["func","time","permision","saveArg","saveThis","throttle","window","location","reload","innerWidth","Math","PI","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reportWebVitals"],"mappings":"gKAoBA,GAiRA,SAAkBA,EAAMC,GACtB,IAAIC,GAAY,EACZC,EAAU,KACVC,EAAW,KA7RjBC,EAHmB,WACjBC,OAAOC,SAASC,WAEK,KASnBF,OAAOG,WAAa,KA4CNC,KAAKC,QAWlB,GAAIL,OAAOG,YAAc,WAsDzB,GAAIH,OAAOG,YAAc,WAsDzB,GAAIH,OAAOG,YAAc,UAkGTC,KAAKC,GACLD,KAAKC,IC1RF,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCSdQ,K","file":"static/js/main.267cbe77.chunk.js","sourcesContent":["import React from 'react';\r\nimport ParticleField from 'react-particles-webgl';\r\n\r\n/**\r\n * The default configuation for the ParticleField component\r\n *\r\n * Any option passed in via props will overwrite the default config\r\n */\r\nvar resizeReload = function(){\r\n  window.location.reload();\r\n}\r\nthrottle(resizeReload, 500);\r\n\r\n// window.addEventListener('resize', resizeReload);\r\n\r\n\r\n\r\n\r\n\r\n// config for desktop\r\nif (window.innerWidth > 1700) {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 90,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 500,\r\n      minSize: 18,\r\n      maxSize: 22,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      polarAngle: Math.PI/3,\r\n      // minPolarAngle: Math.PI/3,\r\n      // maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 0.75,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n}\r\nelse if (window.innerWidth >= 1366) {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 80,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 500,\r\n      minSize: 18,\r\n      maxSize: 20,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      // minPolarAngle: Math.PI/3,\r\n      // maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 0.75,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n}\r\nelse if (window.innerWidth >= 1024) {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 70,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 500,\r\n      minSize: 18,\r\n      maxSize: 20,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      // minPolarAngle: Math.PI/3,\r\n      // maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 0.75,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n}\r\nelse if (window.innerWidth >= 768) {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 80,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 400,\r\n      minSize: 12,\r\n      maxSize: 18,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      // minPolarAngle: Math.PI/3,\r\n      // maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 0.75,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n} \r\nelse {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#fffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 50,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#fffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 350,\r\n      minSize: 10,\r\n      maxSize: 15,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      minPolarAngle: Math.PI/3,\r\n      maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 1.5,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction throttle(func, time) {\r\n  var permision = true;\r\n  var saveArg = null;\r\n  var saveThis = null;\r\n  return function waper(x){\r\n    if (permision){\r\n      func.call(this, x);// here can change to .apply(this,arguments)\r\n      permision = false;\r\n      setTimeout(function(){\r\n        permision = true;\r\n        if(saveThis){\r\n          waper.apply(saveThis,saveArg);\r\n          saveArg = saveThis = null;\r\n        }\r\n      }, time);\r\n    }else{\r\n      saveArg = arguments;\r\n      saveThis = this;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default () => <ParticleField config={config} />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('plexus')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}