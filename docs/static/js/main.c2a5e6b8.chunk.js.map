{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["func","time","permision","saveArg","saveThis","throttle","window","location","reload","innerWidth","config","showCube","dimension","velocity","boundaryType","antialias","direction","xMin","xMax","yMin","yMax","zMin","zMax","lines","colorMode","color","transparency","limitConnections","maxConnections","minDistance","visible","particles","shape","boundingBox","count","minSize","maxSize","cameraControls","enabled","enableDamping","dampingFactor","enableZoom","zoomSpeed","smoothZoom","maxDistance","enablePan","rotateSpeed","autoRotate","autoRotateSpeed","resetCameraFlag","minPolarAngle","Math","PI","maxPolarAngle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"+LAoBA,GA8GA,SAAkBA,EAAMC,GACtB,IAAIC,GAAY,EACZC,EAAU,KACVC,EAAW,KA1HjBC,EAHmB,WACjBC,OAAOC,SAASC,WAEK,KASnBF,OAAOG,WAAa,IACtB,IAAIC,EAAS,CACXC,UAAU,EACVC,UAAW,KACXC,SAAU,GACVC,aAAc,SACdC,WAAW,EACXC,UAAW,CACTC,MAAO,EACPC,KAAM,EACNC,MAAO,GACPC,KAAM,GACNC,MAAO,EACPC,KAAM,GAERC,MAAO,CACLC,UAAW,QACXC,MAAO,UACPC,aAAc,KACdC,kBAAkB,EAClBC,eAAgB,GAChBC,YAAa,GACbC,SAAS,GAEXC,UAAW,CACTP,UAAW,QACXC,MAAO,UACPC,aAAc,EACdM,MAAO,SACPC,YAAa,SACbC,MAAO,IACPC,QAAS,GACTC,QAAS,GACTN,SAAS,GAEXO,eAAgB,CACdC,SAAS,EACTC,eAAe,EACfC,cAAe,IACfC,YAAY,EACZC,UAAW,GACXC,YAAY,EACZd,YAAa,IACbe,YAAa,IAGbC,WAAW,EACXC,YAAa,IACbC,YAAY,EACZC,iBAAkB,GAClBC,iBAAiB,SAKjBvC,EAAS,CACXC,UAAU,EACVC,UAAW,KACXC,SAAU,GACVC,aAAc,SACdC,WAAW,EACXC,UAAW,CACTC,MAAO,EACPC,KAAM,EACNC,MAAO,GACPC,KAAM,GACNC,MAAO,EACPC,KAAM,GAERC,MAAO,CACLC,UAAW,QACXC,MAAO,SACPC,aAAc,KACdC,kBAAkB,EAClBC,eAAgB,GAChBC,YAAa,GACbC,SAAS,GAEXC,UAAW,CACTP,UAAW,QACXC,MAAO,SACPC,aAAc,EACdM,MAAO,SACPC,YAAa,SACbC,MAAO,IACPC,QAAS,GACTC,QAAS,GACTN,SAAS,GAEXO,eAAgB,CACdC,SAAS,EACTC,eAAe,EACfC,cAAe,IACfC,YAAY,EACZC,UAAW,GACXC,YAAY,EACZd,YAAa,IACbe,YAAa,IACbM,cAAeC,KAAKC,GAAG,EACvBC,cAAeF,KAAKC,GAAG,IACvBP,WAAW,EACXC,YAAa,IACbC,YAAY,EACZC,iBAAkB,GAClBC,iBAAiB,IA6BR,wBAAM,cAAC,IAAD,CAAevC,OAAQA,KC7I7B4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,WAM1Bd,M","file":"static/js/main.c2a5e6b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ParticleField from 'react-particles-webgl';\r\n\r\n/**\r\n * The default configuation for the ParticleField component\r\n *\r\n * Any option passed in via props will overwrite the default config\r\n */\r\nvar resizeReload = function(){\r\n  window.location.reload();\r\n}\r\nthrottle(resizeReload, 500);\r\n\r\n// window.addEventListener('resize', resizeReload);\r\n\r\n\r\n\r\n\r\n\r\n// config for desktop\r\nif (window.innerWidth > 768) {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 90,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#ffffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 400,\r\n      minSize: 20,\r\n      maxSize: 24,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      // minPolarAngle: Math.PI/3,\r\n      // maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 0.75,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n// config for mobile\r\n} else {\r\n  var config = {\r\n    showCube: false,\r\n    dimension: '3D',\r\n    velocity: 0.3,\r\n    boundaryType: 'bounce',\r\n    antialias: true,\r\n    direction: {\r\n      xMin: -1,\r\n      xMax: 1,\r\n      yMin: -0.5,\r\n      yMax: 0.5,\r\n      zMin: -1,\r\n      zMax: 1\r\n    },\r\n    lines: {\r\n      colorMode: 'solid',\r\n      color: '#fffff',\r\n      transparency: 0.999,\r\n      limitConnections: true,\r\n      maxConnections: 10,\r\n      minDistance: 50,\r\n      visible: true\r\n    },\r\n    particles: {\r\n      colorMode: 'solid',\r\n      color: '#fffff',\r\n      transparency: 1,\r\n      shape: 'circle',\r\n      boundingBox: 'canvas',\r\n      count: 350,\r\n      minSize: 10,\r\n      maxSize: 18,\r\n      visible: true\r\n    },\r\n    cameraControls: {\r\n      enabled: true,\r\n      enableDamping: true,\r\n      dampingFactor: 0.01,\r\n      enableZoom: true,\r\n      zoomSpeed: 0.5,\r\n      smoothZoom: true,\r\n      minDistance: 1000,\r\n      maxDistance: 2000,\r\n      minPolarAngle: Math.PI/3,\r\n      maxPolarAngle: Math.PI/1.5,\r\n      enablePan: false,\r\n      rotateSpeed: 1.5,\r\n      autoRotate: true,\r\n      autoRotateSpeed: -0.5,\r\n      resetCameraFlag: true\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction throttle(func, time) {\r\n  var permision = true;\r\n  var saveArg = null;\r\n  var saveThis = null;\r\n  return function waper(x){\r\n    if (permision){\r\n      func.call(this, x);//тут можна замінити на .apply(this,arguments)\r\n      permision = false;\r\n      setTimeout(function(){\r\n        permision = true;\r\n        if(saveThis){\r\n          waper.apply(saveThis,saveArg);\r\n          saveArg = saveThis = null;\r\n        }\r\n      }, time);\r\n    }else{\r\n      saveArg = arguments;\r\n      saveThis = this;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default () => <ParticleField config={config} />;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('plexus')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}