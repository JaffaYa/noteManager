{"version":3,"sources":["C:/Disc/V/spa/my-app/src/App.js","C:/Disc/V/spa/my-app/src/reportWebVitals.js","C:/Disc/V/spa/my-app/src/index.js"],"names":["func","time","permision","saveArg","saveThis","throttle","window","location","reload","innerWidth","config","showCube","dimension","velocity","boundaryType","antialias","direction","xMin","xMax","yMin","yMax","zMin","zMax","lines","colorMode","color","transparency","limitConnections","maxConnections","minDistance","visible","particles","shape","boundingBox","count","minSize","maxSize","cameraControls","enabled","enableDamping","dampingFactor","enableZoom","zoomSpeed","smoothZoom","maxDistance","enablePan","rotateSpeed","autoRotate","autoRotateSpeed","resetCameraFlag","minPolarAngle","Math","PI","maxPolarAngle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"+LAoBA,GA8GA,SAAkBA,EAAMC,GACtB,IAAIC,GAAY,EACZC,EAAU,KACVC,EAAW,KA1HjBC,EAHmB,WACjBC,OAAOC,SAASC,WAEK,KASnBF,OAAOG,WAAa,IACtB,IAAIC,EAAS,CACXC,UAAU,EACVC,UAAW,KACXC,SAAU,GACVC,aAAc,SACdC,WAAW,EACXC,UAAW,CACTC,MAAO,EACPC,KAAM,EACNC,MAAO,GACPC,KAAM,GACNC,MAAO,EACPC,KAAM,GAERC,MAAO,CACLC,UAAW,QACXC,MAAO,UACPC,aAAc,KACdC,kBAAkB,EAClBC,eAAgB,GAChBC,YAAa,GACbC,SAAS,GAEXC,UAAW,CACTP,UAAW,QACXC,MAAO,UACPC,aAAc,EACdM,MAAO,SACPC,YAAa,SACbC,MAAO,IACPC,QAAS,GACTC,QAAS,GACTN,SAAS,GAEXO,eAAgB,CACdC,SAAS,EACTC,eAAe,EACfC,cAAe,IACfC,YAAY,EACZC,UAAW,GACXC,YAAY,EACZd,YAAa,IACbe,YAAa,IAGbC,WAAW,EACXC,YAAa,IACbC,YAAY,EACZC,iBAAkB,GAClBC,iBAAiB,SAKjBvC,EAAS,CACXC,UAAU,EACVC,UAAW,KACXC,SAAU,GACVC,aAAc,SACdC,WAAW,EACXC,UAAW,CACTC,MAAO,EACPC,KAAM,EACNC,MAAO,GACPC,KAAM,GACNC,MAAO,EACPC,KAAM,GAERC,MAAO,CACLC,UAAW,QACXC,MAAO,SACPC,aAAc,KACdC,kBAAkB,EAClBC,eAAgB,GAChBC,YAAa,GACbC,SAAS,GAEXC,UAAW,CACTP,UAAW,QACXC,MAAO,SACPC,aAAc,EACdM,MAAO,SACPC,YAAa,SACbC,MAAO,IACPC,QAAS,GACTC,QAAS,GACTN,SAAS,GAEXO,eAAgB,CACdC,SAAS,EACTC,eAAe,EACfC,cAAe,IACfC,YAAY,EACZC,UAAW,GACXC,YAAY,EACZd,YAAa,IACbe,YAAa,IACbM,cAAeC,KAAKC,GAAG,EACvBC,cAAeF,KAAKC,GAAG,IACvBP,WAAW,EACXC,YAAa,IACbC,YAAY,EACZC,iBAAkB,GAClBC,iBAAiB,IA6BR,wBAAM,cAAC,IAAD,CAAevC,OAAQA,KC7I7B4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,WAM1Bd,M","file":"static/js/main.9ac8e5f0.chunk.js","sourcesContent":["import React from 'react';\nimport ParticleField from 'react-particles-webgl';\n\n/**\n * The default configuation for the ParticleField component\n *\n * Any option passed in via props will overwrite the default config\n */\nvar resizeReload = function(){\n  window.location.reload();\n}\nthrottle(resizeReload, 500);\n\n// window.addEventListener('resize', resizeReload);\n\n\n\n\n\n// config for desktop\nif (window.innerWidth > 768) {\n  var config = {\n    showCube: false,\n    dimension: '3D',\n    velocity: 0.3,\n    boundaryType: 'bounce',\n    antialias: true,\n    direction: {\n      xMin: -1,\n      xMax: 1,\n      yMin: -0.5,\n      yMax: 0.5,\n      zMin: -1,\n      zMax: 1\n    },\n    lines: {\n      colorMode: 'solid',\n      color: '#ffffff',\n      transparency: 0.999,\n      limitConnections: true,\n      maxConnections: 10,\n      minDistance: 90,\n      visible: true\n    },\n    particles: {\n      colorMode: 'solid',\n      color: '#ffffff',\n      transparency: 1,\n      shape: 'circle',\n      boundingBox: 'canvas',\n      count: 400,\n      minSize: 20,\n      maxSize: 24,\n      visible: true\n    },\n    cameraControls: {\n      enabled: true,\n      enableDamping: true,\n      dampingFactor: 0.01,\n      enableZoom: true,\n      zoomSpeed: 0.5,\n      smoothZoom: true,\n      minDistance: 1000,\n      maxDistance: 2000,\n      // minPolarAngle: Math.PI/3,\n      // maxPolarAngle: Math.PI/1.5,\n      enablePan: false,\n      rotateSpeed: 0.75,\n      autoRotate: true,\n      autoRotateSpeed: -0.3,\n      resetCameraFlag: true\n    }\n  }\n// config for mobile\n} else {\n  var config = {\n    showCube: false,\n    dimension: '3D',\n    velocity: 0.3,\n    boundaryType: 'bounce',\n    antialias: true,\n    direction: {\n      xMin: -1,\n      xMax: 1,\n      yMin: -0.5,\n      yMax: 0.5,\n      zMin: -1,\n      zMax: 1\n    },\n    lines: {\n      colorMode: 'solid',\n      color: '#fffff',\n      transparency: 0.999,\n      limitConnections: true,\n      maxConnections: 10,\n      minDistance: 50,\n      visible: true\n    },\n    particles: {\n      colorMode: 'solid',\n      color: '#fffff',\n      transparency: 1,\n      shape: 'circle',\n      boundingBox: 'canvas',\n      count: 350,\n      minSize: 10,\n      maxSize: 18,\n      visible: true\n    },\n    cameraControls: {\n      enabled: true,\n      enableDamping: true,\n      dampingFactor: 0.01,\n      enableZoom: true,\n      zoomSpeed: 0.5,\n      smoothZoom: true,\n      minDistance: 1000,\n      maxDistance: 2000,\n      minPolarAngle: Math.PI/3,\n      maxPolarAngle: Math.PI/1.5,\n      enablePan: false,\n      rotateSpeed: 1.5,\n      autoRotate: true,\n      autoRotateSpeed: -0.5,\n      resetCameraFlag: true\n    }\n  }\n}\n\n\nfunction throttle(func, time) {\n  var permision = true;\n  var saveArg = null;\n  var saveThis = null;\n  return function waper(x){\n    if (permision){\n      func.call(this, x);//тут можна замінити на .apply(this,arguments)\n      permision = false;\n      setTimeout(function(){\n        permision = true;\n        if(saveThis){\n          waper.apply(saveThis,saveArg);\n          saveArg = saveThis = null;\n        }\n      }, time);\n    }else{\n      saveArg = arguments;\n      saveThis = this;\n    }\n  }\n}\n\n\nexport default () => <ParticleField config={config} />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('plexus')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}